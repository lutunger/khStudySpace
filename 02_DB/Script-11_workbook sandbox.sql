CREATE TABLE TB_DEPARTMENT(
	DEPARTMENT_NO 	VARCHAR2(10),
	DEPARTMENT_NAME VARCHAR2(20),
	CATEGORY 		VARCHAR2(20),
	OPEN_YN			CHAR(1),
	CAPACITY		NUMBER


);


ALTER TABLE TB_DEPARTMENT MODIFY DEPARTMENT_NAME NOT NULL;
ALTER TABLE TB_DEPARTMENT DROP CONSTRAINT SYS_C007573;
ALTER TABLE TB_DEPARTMENT ADD PRIMARY KEY(DEPARTMENT_NO);

COMMENT ON COLUMN TB_DEPARTMENT.DEPARTMENT_NO IS '학과 번호';
COMMENT ON COLUMN TB_DEPARTMENT.DEPARTMENT_NAME IS '학과 이름';



--			// 사번, 이름, 부서명, 직급명, 급여, 전화번호, 이메일
--			// 직급코드 오름차순으로 조회

SELECT E.EMP_ID , E.EMP_NAME , D.DEPT_TITLE , J.JOB_NAME , E.SALARY , E.PHONE , E.EMAIL 
FROM EMPLOYEE E
LEFT JOIN DEPARTMENT D ON (E.DEPT_CODE = D.DEPT_ID)
LEFT JOIN JOB J ON (E.JOB_CODE = J.JOB_CODE)
WHERE ENT_YN = 'N'
ORDER BY E.JOB_CODE;

SELECT * FROM EMPLOYEE;

--// 현재 퇴직한 사원의
--		// 사번, 이름, 전화번호, 이메일, 퇴사일을
--		// 퇴사일 오름차순으로 조회
SELECT E.EMP_ID , E.EMP_NAME , E.PHONE , E.EMAIL , E.ENT_DATE 
FROM EMPLOYEE E
WHERE ENT_YN = 'Y'
ORDER BY ENT_DATE ;
--
--// 사번을 입력 받아 일치하는 사원의  
--		// 사번, 이름, 부서명, 직급명, 급여, 전화번호, 이메일, 입사일, 퇴직여부 조회
--		// 단, 사번이 일치하는 사원이 없으면
--		// "사번이 일치하는 사원이 없습니다" 출력
--	 */

SELECT E.EMP_ID , E.EMP_NAME , NVL(D.DEPT_TITLE, '소속없음') , J.JOB_NAME ,
		E.SALARY , E.PHONE , E.EMAIL , E.HIRE_DATE , E.ENT_YN 
FROM EMPLOYEE E
LEFT JOIN DEPARTMENT D ON (E.DEPT_CODE = D.DEPT_ID)
LEFT JOIN JOB J ON (E.JOB_CODE = J.JOB_CODE)
WHERE E.EMP_ID = 222;

SELECT E.ENT_YN 
FROM EMPLOYEE E
LEFT JOIN DEPARTMENT D ON (E.DEPT_CODE = D.DEPT_ID)
LEFT JOIN JOB J ON (E.JOB_CODE = J.JOB_CODE)
WHERE E.EMP_ID = 222;

SELECT COLUMN
FROM SAL_GRADE sg; 

SELECT *
FROM EMPLOYEE;

CREATE SEQUENCE SEQ_WORKBOOK_NO
START WITH 223
INCREMENT BY 1;

UPDATE EMPLOYEE 
SET ENT_YN = 'Y'
WHERE EMP_ID = 224;

COMMIT;

SELECT *
FROM USER_SEQUENCES ;



UPDATE EMPLOYEE
SET EMAIL = ?,
	PHONE = ?,
	SALALY = ?,
	BONUS = ?
WHERE EMP_ID = ?


DELETE FROM EMPLOYEE
WHERE EMP_ID = ?;




SELECT ENT_YN 
FROM EMPLOYEE
WHERE EMP_ID = 224;


SELECT CASE 
	-- 존재하는 사원?
	WHEN (SELECT COUNT(*) FROM EMPLOYEE WHERE EMP_ID = 222) = 0
	THEN 0
	
	-- 존재하지만 퇴직한 사원?
	WHEN (SELECT COUNT(*) FROM EMPLOYEE
		WHERE EMP_ID = 222 AND ENT_YN = 'Y') = 1
	THEN 1
	
	-- 재직하는 사원이면...
	ELSE 2
END "CHECK"
FROM DUAL ;




UPDATE EMPLOYEE 
SET ENT_YN = 'Y',
	ENT_DATE = SYSDATE 
WHERE EMP_ID = ?
;


/* 8.
가장 최근(입사일이 늦은) 사원 5명의
사번, 이름, 부서명, 입사일을
입사일 내림차순으로 조회 */
-- ROWNUM, 인라인뷰(FROM절 서브쿼리)

SELECT * FROM
	(SELECT EMP_ID, EMP_NAME, HIRE_DATE,
		NVL(DEPT_TITLE, '부서없음') DEPT_TITLE
	FROM EMPLOYEE
	LEFT JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID)
	ORDER BY HIRE_DATE DESC)
WHERE ROWNUM <= 5;

-- 9.
--// 각 부서별
--// 부서명, 인원 수, 급여 평균
--// 부서코드 오름차순 조회
SELECT DEPT_CODE, NVL(DEPT_TITLE, '부서없음') DEPT_TITLE,
		COUNT(*) 인원, FLOOR(AVG(SALARY)) 평균
FROM EMPLOYEE
LEFT JOIN DEPARTMENT ON(DEPT_CODE = DEPT_ID)
GROUP BY DEPT_CODE, DEPT_TITLE
ORDER BY DEPT_CODE;














